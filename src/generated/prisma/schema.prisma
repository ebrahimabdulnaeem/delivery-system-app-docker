generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
  output        = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id
  username        String
  email           String            @unique
  password        String
  role            String
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @map("updated_at")
  accounts        Account[]
  orders          orders[]
  sessions        Session[]
  delegate_sheets delegate_sheets[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model cities {
  id         String   @id
  name       String   @unique @db.VarChar(100)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}

model drivers {
  id               String            @id
  driver_name      String            @db.VarChar(100)
  driver_id_number String?           @db.VarChar(50)
  driver_phone     String            @db.VarChar(50)
  assigned_areas   Json?
  created_at       DateTime          @default(now()) @db.Timestamp(6)
  updated_at       DateTime          @default(now()) @db.Timestamp(6)
  orders           orders[]
  delegate_sheets  delegate_sheets[]

  @@index([driver_phone], map: "idx_drivers_phone")
}

model orders {
  id                    String                  @id
  barcode               String                  @unique @db.VarChar(50)
  order_date            DateTime                @default(now()) @db.Timestamp(6)
  recipient_name        String                  @db.VarChar(100)
  recipient_phone1      String                  @db.VarChar(50)
  recipient_phone2      String?                 @db.VarChar(50)
  recipient_address     String
  recipient_city        String                  @db.VarChar(50)
  cod_amount            Decimal                 @db.Decimal(10, 2)
  order_description     String?
  special_instructions  String?
  sender_reference      String?                 @db.VarChar(100)
  number_of_pieces      Int?                    @default(1)
  status                String                  @db.VarChar(50)
  driver_id             String?
  created_by            String
  created_at            DateTime                @default(now()) @db.Timestamp(6)
  updated_at            DateTime                @default(now()) @db.Timestamp(6)
  users                 User                    @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction)
  drivers               drivers?                @relation(fields: [driver_id], references: [id], onUpdate: NoAction)
  delegate_sheet_orders delegate_sheet_orders[]

  @@index([barcode], map: "idx_orders_barcode")
  @@index([created_by], map: "idx_orders_created_by")
  @@index([driver_id], map: "idx_orders_driver_id")
  @@index([status], map: "idx_orders_status")
}

model delegate_sheets {
  id                    String                  @id
  sheet_barcode         String                  @unique @db.VarChar(50)
  driver_id             String
  total_amount          Decimal                 @db.Decimal(10, 2)
  order_count           Int
  created_by            String
  created_at            DateTime                @default(now()) @db.Timestamp(6)
  updated_at            DateTime                @default(now()) @db.Timestamp(6)
  drivers               drivers                 @relation(fields: [driver_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  users                 User                    @relation(fields: [created_by], references: [id], onDelete: Restrict, onUpdate: NoAction)
  delegate_sheet_orders delegate_sheet_orders[]

  @@index([sheet_barcode], map: "idx_delegate_sheets_barcode")
}

model delegate_sheet_orders {
  id              String          @id
  sheet_id        String
  order_id        String
  created_at      DateTime        @default(now()) @db.Timestamp(6)
  delegate_sheets delegate_sheets @relation(fields: [sheet_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  orders          orders          @relation(fields: [order_id], references: [id], onDelete: Restrict, onUpdate: NoAction)

  @@unique([sheet_id, order_id])
  @@index([sheet_id], map: "idx_delegate_sheet_orders_sheet_id")
  @@index([order_id], map: "idx_delegate_sheet_orders_order_id")
}

model Product {
  id          String        @id
  name        String
  quantity    Int
  price       Decimal       @db.Decimal(10, 2)
  unit        UnitOfMeasure
  variants    Json?
  barcode     String        @unique
  expiry_date DateTime?     @map("expiry_date")
  created_at  DateTime      @default(now()) @map("created_at")
  updated_at  DateTime      @default(now()) @map("updated_at")

  @@map("products")
}

enum UnitOfMeasure {
  PIECE
  KG
  CARTON
}
